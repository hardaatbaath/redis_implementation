// C stdlib
#include <assert.h>      // assert
#include <cstddef>
#include <errno.h>       // errno
#include <stdint.h>      // uint8_t, uint32_t
#include <stdio.h>       // printf
#include <string.h>      // memcpy

// POSIX / system (socket API, inet helpers, read/write, poll)
#include <sys/types.h>   // ssize_t
#include <unistd.h>      // read, write, close
#include <arpa/inet.h>   // htons, htonl, ntohs, inet_ntop
#include <netinet/in.h>  // sockaddr_in
#include <sys/socket.h>  // socket, bind, listen, accept, setsockopt
#include <poll.h>        // poll, struct pollfd

// C++ stdlib
#include <string>        // std::string
#include <vector>        // std::vector

// local
#include "utils.h"
#include "constants.h"
#include "hashtable.h"

#define container_of(ptr, T, member) \
    ((T *) ((char*) ptr - offsetof(T, member)))


struct Connection {
    int socket_fd = -1; // listening/accepted socket fd, by default set to -1

    // application's intentions
    bool want_read = false;
    bool want_write = false;
    bool want_close = false;

    // buffered input and output
    std::vector<uint8_t> incoming; // data to be parsed by the application
    std::vector<uint8_t> outgoing; // responses generated by the application
};

struct Response {
    uint32_t status;
    std::vector<uint8_t> data;
};

enum ResponseStatus {
    RES_OK = 200,
    RES_NX = 404,
    RES_ERR = 500,
};

// Top level hashtable for the server
static struct  {
    HashMap db;
} server_data;

// KV pair storage for the server
struct Entry {
    struct HashNode node;    // embedded hashnode node
    std::string key;
    std::string value;
};

// Lookup key for the server
struct LookupKey {
    HashNode node;
    std::string key;
};

/**
 * Equality comparitor for 'struct Entry'
 * container_of is used to recover the address of a parent struct from the address of one of its members. 
*/ 
static bool entry_equals(HashNode *lhs, HashNode *rhs) {
    struct Entry *le = container_of(lhs, struct Entry, node);
    struct Entry *re = container_of(rhs, struct Entry, node);
    return le->key == re->key;
}

/**
 * FNV hash function
*/
static uint64_t string_hash(const uint8_t *data, size_t len){
    uint32_t base = 0x811C9DC5; // FNV-1a offset basis, Decimal: 2166136261
    uint32_t prime = 0x1000193; // FNV-1a prime, Decimal: 16777619

    for (size_t i = 0; i < len; i++) {
        base = (base + data[i]) * prime;
    }
    return base;
}

/**
 * Handle the client connection
*/
static Connection *handle_accept(int listen_fd) {
    //accept the connection
    struct sockaddr_in client_addr = {};
    socklen_t addrlen = sizeof(client_addr);
    int conn_fd = accept(listen_fd, (struct sockaddr *)&client_addr, &addrlen);
    if (conn_fd < 0) { 
        msg_error("accept() error");
        return nullptr;
    }
    
    // get the client ip address, remember that IP is in little endian
    // eg: 192.168.1.100 is 0xc0a80164 in little endian
    // uint8_t byte0 = ip & 0xFF;           // 0xC0 = 192
    // uint8_t byte1 = (ip >> 8) & 0xFF;    // 0xA8 = 168
    // uint8_t byte2 = (ip >> 16) & 0xFF;   // 0x01 = 1
    // uint8_t byte3 = (ip >> 24) & 0xFF;   // 0x0A = 10
    uint32_t ip = client_addr.sin_addr.s_addr;
    fprintf(stderr, "[server] accepted connection from %u.%u.%u.%u:%u\n", 
        ip & 255, (ip >> 8) & 255, (ip >> 16) & 255, (ip >> 24), // moving 8 bits bcuz uint32_t is 4 bytes
        ntohs(client_addr.sin_port));

    // set the connection to non-blocking
    fd_set_nb(conn_fd);
    
    // create a new connection
    Connection *conn = new Connection();
    conn->socket_fd = conn_fd;
    conn->want_read = true;
    return conn;
}

/**
 * Read the header for the request (size or total number of requests)
*/
static bool read_header(const uint8_t *&cursor, const uint8_t *end, uint32_t &value) {
    // Check if there is enough data to read the header`
    if (end - cursor < 4) { return false; }

    // Read the header, move the pointer to the next 4 bytes
    memcpy(&value, cursor, 4);
    cursor += 4;
    
    return true;
}

/**
 * Read the request
*/
static bool read_string(const uint8_t *&cursor, const uint8_t *end, uint32_t len, std::string &output) {
    // Check if there is enough data to read the string
    if (end - cursor < len) { return false; }

    // Read the string, move the pointer to the next len bytes
    output = std::string((char*)cursor, len);
    cursor += len;

    return true;
}

/** 
 * Parse one request:
 *      +----------+-----+------+-----+------+-----+-----+------+
 *      | num_args | len | cmd1 | len | cmd2 | ... | len | cmdn |
 *      +----------+-----+------+-----+------+-----+-----+------+
*/
static int32_t parse_request(const uint8_t *data, size_t size, std::vector<std::string> &cmd) {
    const uint8_t *cursor = data;
    const uint8_t *end = cursor + size;
    uint32_t num_args = 0;

    // Read the request header
    if (!read_header(cursor, end , num_args)) { return -1; } // Read the total number of requests
    if (num_args > k_max_args) { return -1; }

    // Read the requests
    while (cmd.size() < num_args) {
        uint32_t len = 0;

        // Read the length of the request
        if (!read_header(cursor, end , len)) { return -1; }

        cmd.push_back(std::string()); // push back an empty string

        // Read the request
        if (!read_string(cursor, end, len, cmd.back())) { return -1; }
    }

    // Check if there is any remaining data
    if (cursor != end) { return -1; }

    return 0;
}

/**
 * Set the value of the key from the hash table
*/
static void set_key(std::vector<std::string> &cmd, Response &resp){
    // A dummy 'Entry' just for the lookup
    Entry key;
    key.key.swap(cmd[1]);
    key.node.hash_code = string_hash((uint8_t*) key.key.data(), key.key.size());

    // Hashtable Lookup
    HashNode *node = hm_lookup(&server_data.db, &key.node, &entry_equals);
    if(node) {
        // Key already exists, update the value
        container_of(node, Entry, node)->value.swap(cmd[2]);
    }
    else {
        // Key does not exist, create a new entry
        Entry *key_entry = new Entry();
        key_entry->key.swap(key.key);
        key_entry->value.swap(cmd[2]);
        key_entry->node.hash_code = key.node.hash_code;
        hm_insert(&server_data.db, &key_entry->node);
    }
    resp.status = RES_OK;
}

/**
 * Get the value of the key from the hash table
*/
static void get_key(std::vector<std::string> &cmd, Response &resp){
    // A dummy 'Entry' just for the lookup
    Entry key;
    key.key.swap(cmd[1]);    // swap is more memory optimised, pointers are swapped instead of creating new overhead of assignment
    key.node.hash_code = string_hash((uint8_t *)key.key.data(), key.key.size());

    // Hashtable lookup
    HashNode *node = hm_lookup(&server_data.db, &key.node, &entry_equals);
    if (!node){
        resp.status = RES_NX;
        return;
    }
    
    // Copy the values
    const std:: string &val = container_of(node, Entry, node)->value;      // Returns the value of the HashNode
    assert(val.size() <= k_max_msg);
    resp.status = RES_OK;
    resp.data.assign(val.begin(), val.end());
}

/**
 * Delete the value of the key from the hash table
*/
static void del_key(std::vector<std::string> &cmd, Response &resp){
    Entry key;
    key.key.swap(cmd[1]);
    key.node.hash_code = string_hash((uint8_t*) key.key.data(), key.key.size());

    // Hashtable delete
    HashNode *node = hm_delete(&server_data.db, &key.node, &entry_equals);
    if (node){
        // Key found, delete the entry via pointer to the entry
        delete container_of(node, Entry, node);
        resp.status = RES_OK;
    }
    else {
        // Key not found, return not found
        resp.status = RES_NX;
    }
}

/**
 * Get all the keys from the hash table
*/
static void all_keys(std::vector<std::string> &cmd, Response &resp){
    bool first = true;
    // Iterate through the buckets in the newer table
    for (size_t i = 0; i <= server_data.db.newer.mask; ++i) {
        // Iterate through the linked list in the bucket
        for (HashNode *node = server_data.db.newer.tab[i]; node; node = node->next) {
            // Get the entry
            const Entry *entry = container_of(node, Entry, node);
            // Add the key and value to the response
            const std::string line = (first ? "" : "\n") + entry->key + " " + entry->value;
            first = false;
            // Append the line to the response
            resp.data.insert(resp.data.end(), line.begin(), line.end());
        }
    }
    resp.status = RES_OK;
}

/** 
 * Run one request
*/
static void run_request(std::vector<std::string> &cmd, Response &resp) {
    resp.status = RES_OK;        // Successfully executed command
    
    // ping request
    if (cmd.size() == 1 && cmd[0] == "ping") {
        const uint8_t *p = (const uint8_t*)"pong";
        resp.data.assign(p, p + 4);
    }

    // get request
    else if (cmd.size() == 2 && cmd[0] == "get") {
        get_key(cmd, resp);
    }

    // set request
    else if (cmd.size() == 3 && cmd[0] == "set") {
        set_key(cmd, resp);
    }

    // del request
    else if (cmd.size() == 2 && cmd[0] == "del") {
        del_key(cmd, resp);
    }

    // all keys request
    else if (cmd.size() == 2 && cmd[0] == "all" && cmd[1] == "keys") {
        all_keys(cmd, resp);
    }

    // unknown request
    else {
        resp.status = RES_ERR;     // Error in executing command
        return;
    }
}

/**
 * Generate the response
*/
static void generate_response(const Response &resp, std::vector<uint8_t> &out) {
    // 4 bytes for the status code + the size of the data
    uint32_t resp_len = 4 + (uint32_t)resp.data.size();

    // append the length of the response
    append_buffer(out, (const uint8_t*)&resp_len, 4);

    // append the status code
    append_buffer(out, (const uint8_t*)&resp.status, 4);

    // append the data
    append_buffer(out, resp.data.data(), resp.data.size());
}

/**
 * Process one request when there is enough data
*/
static bool handle_one_request(Connection *conn) {
    // try to parse the protocol: message header
    if (conn->incoming.size() < 4) { return false; } // we don't even know the size of the message

    uint32_t frame_len = 0;
    memcpy(&frame_len, conn->incoming.data(), 4);
    if (frame_len > k_max_msg) {
        msg_error("too long");
        conn->want_close = true;
        return false;
    }
    
    // Get the message payload
    if (4 + frame_len > conn->incoming.size()) { return false; } // size of the payload is incorrect
    const uint8_t *request = conn->incoming.data() + 4;

    // Parse the request and apply application logic
    std::vector<std::string> cmd;
    if (parse_request(request, frame_len, cmd) < 0) {
        conn->want_close = true;
        return false;
    }

    Response resp;
    // Log parsed command
    std::string command;
    for (size_t i = 0; i < cmd.size(); i++) {
        command = command + cmd[i] + (i < cmd.size() - 1 ? " " : "");
    }
    fprintf(stderr, "[server] command: '%s'\n", command.c_str());

    // Run the request
    run_request(cmd, resp);
    // Generate the response
    generate_response(resp, conn->outgoing);
    // Consume the incoming data
    consume_buffer(conn->incoming, 4 + frame_len);
    return true;
}

/**
 * Application callback when the socket is writable
*/
static void handle_write(Connection *conn) {
    assert(!conn->outgoing.empty()); // check if there is any outgoing data

    // write the response to the socket, outgoing[0] is the pointer to the buffer
    ssize_t rv = write(conn->socket_fd, &conn->outgoing[0], conn->outgoing.size());
    if (rv < 0) {
        if (errno == EAGAIN) { return; } // actually not ready to write as the buffer is full

        msg_error("write() error"); // write() error
        conn->want_close = true;
        return;
    }

    // remove the written data from the outgoing buffer
    consume_buffer(conn->outgoing, (size_t)rv);

    // update the readiness flag
    if (conn->outgoing.size() == 0) { // if there is no outgoing data, we want to read
        conn->want_read = true;
        conn->want_write = false;
    }
}   

/**
 * Application callback when the socket is readable
 * Read the request and parse it
 * Generate the response
 * Write the response to the socket
*/
static void handle_read(Connection *conn) {
    // read the request [4b header + payload]
    uint8_t buf[64 * 1024]; // 64KB buffer
    ssize_t rv = read(conn->socket_fd, buf, sizeof(buf));
    if (rv < 0) {
        if (errno == EAGAIN) { return; } // actually not ready

        // handle IO errors
        msg_error("read() error");
        conn->want_close = true;
        return; // want to close the connection
    }

    // Handle EOF, closing as we are done with the connection
    if (rv == 0) {
        if (conn->incoming.empty()) { msg("[server] client closed connection"); }
        else { msg("unexpected EOF"); }
        conn->want_close = true;
        return;
    }
    
    // append the incoming data to the buffer
    append_buffer(conn->incoming, buf, (size_t)rv);

    // parse the request and generate response, in a while loop as there may be multiple requests in the buffer
    while (handle_one_request(conn)) {}

    // update the readiness flag
    if (!conn->outgoing.empty()) { // if there is outgoing data, we want to write
        conn->want_read = false;
        conn->want_write = true;

        // The socket is likely ready to write in a request-response protocol,
        // try to write it without waiting for the next iteration.
        return handle_write(conn);
    }
}

/**
 * Main function
 * 
 * Initializes a TCP server that listens on port 8080 for incoming client connections.
 * - Creates a non-blocking listening socket bound to 0.0.0.0:8080.
 * - Uses poll() to multiplex I/O across multiple client connections.
 * - Accepts new connections and tracks them using a vector indexed by file descriptor.
 * - Handles readable and writable events for each client socket.
 * - Cleans up connections on error or when marked for closure.
 * 
 * This function runs an infinite event loop and only exits on fatal error.
 * 
 * Return 0 on successful execution.
*/
int main() {
    // the listening socket
    int listen_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (listen_fd < 0) { die("socket()"); }
    msg("[server] socket created");

    int val = 1;
    setsockopt(listen_fd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val)); // set the port to reusable when the program is restarted

    // declare the socket connection
    struct sockaddr_in addr ={};
    addr.sin_family = AF_INET;
    addr.sin_port = htons(8080);  //port
    addr.sin_addr.s_addr = htonl(0); //wildcard ip 0.0.0.0    INADDR_ANY; // listen to all addresses

    // bind
    int rv = bind(listen_fd, (const struct sockaddr *)&addr, sizeof(addr));
    if (rv) { die("bind()"); } 
    msg("[server] bind successful on 0.0.0.0:8080");

    // set the listen fd to nonblocking mode
    fd_set_nb(listen_fd);

    // listen
    rv = listen(listen_fd, SOMAXCONN);
    if (rv) {die("listen()");} 
    msg("[server] listen successful on 0.0.0.0:8080");

    // a map of all the client connections, keyed by the file descriptor
    std::vector<Connection *> fd2conn;
    
    // the event loop
    std::vector<struct pollfd> poll_args;
    while (true) {
        // prepare the arguments for the poll()
        poll_args.clear();

        // put the listening socket into the poll_args in the first position
    struct pollfd pfd = {listen_fd, POLLIN, 0};
        poll_args.push_back(pfd);

        // the rest are the connection sockets
        for (Connection *conn : fd2conn) {
            if (!conn) { continue; }

            // always poll() for errors
            struct pollfd pfd = {conn->socket_fd, POLLERR, 0};
            if (conn->want_read) { pfd.events |= POLLIN; } // if we want to read, add POLLIN to the events
            if (conn->want_write) { pfd.events |= POLLOUT; } // if we want to write, add POLLOUT to the events
            poll_args.push_back(pfd);
        }

        // poll() for events, polling for readiness
        rv = poll(poll_args.data(), (nfds_t)poll_args.size(), -1);
        if (rv < 0) { 
            if (errno == EINTR) { continue; }
            die("poll()"); 
        }
        
        // handle the listening socket, poll_args[0] is the listening socket
        // revents is the events that happened on the socket
        if (poll_args[0].revents) {
            if (Connection *conn = handle_accept(listen_fd)) {
                // put it in the map
                if (fd2conn.size() <= (size_t) conn->socket_fd) { fd2conn.resize(conn->socket_fd + 1); }
                
                // put it in the map
                assert(!fd2conn[conn->socket_fd]);
                fd2conn[conn->socket_fd] = conn;
                // here the mapping is the position being same as the file descriptor
            }
        }

        // handle the client connections sockets
        for (size_t i = 1; i < poll_args.size(); i++) { // skipping the first, as we put it there
            uint32_t ready = poll_args[i].revents;
            if (ready == 0) { continue; }

            // get the connection
            Connection *conn = fd2conn[poll_args[i].fd];
            
            if ((ready & POLLIN) && conn->want_read)  { handle_read(conn); }
            if ((ready & POLLOUT) && conn->want_write) { handle_write(conn); }

            if ((ready & POLLERR) || conn->want_close) {
                (void)close(conn->socket_fd);
                fd2conn[conn->socket_fd] = NULL;
                delete conn;
            }
        }
        // for each connection socket
    }
    // for event loop
    return 0;
}